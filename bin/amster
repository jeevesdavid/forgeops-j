#!/usr/bin/python3
# Script to import or export dynamic configuration files from AM using an amster Kubernetes job.
# This must be run in the same namespace as AM. The amster pod expects to find the amster secret key
# (generated by secret agent) in the namespace.
import argparse
import utils

def main():
    common = argparse.ArgumentParser(add_help=False)
    common.add_argument('-n', '--namespace', default='',
                        help='Target namespace (default: current namespace)')
    parser = argparse.ArgumentParser(
        description='amster import or export json configuration files')
    subparser = parser.add_subparsers(dest='cmd', required=True, help='select action to perform')
    parser_import = subparser.add_parser('import', help='import json configuration files into AM', parents=[common])
    parser_import.add_argument('src', help='Source file or directory to import')
    parser_export = subparser.add_parser('export', help='Export files from amster', parents=[common])
    parser_export.add_argument('--global', dest='glob', action='store_true', help='Include the global/ configuration in the amster export')
    parser_export.add_argument('dst', help='destination directory to export files to')
    parser_clean = subparser.add_parser('clean', help='Clean up and remove any amster pods', parents=[common])

    args = parser.parse_args()
    ctx_namespace = utils.get_namespace()
    namespace = getattr(args, 'namespace', None) or ctx_namespace

    if args.cmd == 'clean':
        utils.clean_amster_job(namespace)

    # Import files into amster.
    if args.cmd == 'import':
        utils.amster_import(namespace, args.src)
        return

    # Export files out of amster
    if args.cmd == 'export':
        utils.amster_export(namespace, args.dst, args.glob)
        return

if __name__ == '__main__':
    main()