#!/usr/bin/env python3
"""This script deploys the ForgeRock Identity Plaform components to Kubernetes."""

import argparse
import os
import sys
import time
from urllib import request
import utils
import json

def amster_import(component, ns, fqdn, ctx):
    utils.message('Starting amster import')
    docker_dir = os.path.join(sys.path[0], '../docker')
    amster_config_path = os.path.join(docker_dir, 'amster', 'config-profiles', 'cdk')
    utils.amster_import(ns, amster_config_path, printlogs=False)

bundles = {
    'base': ['dev/kustomizeConfig', 'base/secrets', 'base/ingress', 'dev/scripts'],
    'ds': ['base/ds-idrepo'],
    'apps': ['base/am-cdk', 'base/idm-cdk', 'base/rcs-agent'],
    'ui': ['base/admin-ui', 'base/end-user-ui', 'base/login-ui'],
    'am': ['base/am-cdk'],
    'idm': ['base/idm-cdk'],
    'amster': [amster_import],
}
build_targets = ['am', 'amster', 'idm', 'ds-idrepo', 'ds-cts', 'ig']

def get_component_url(component, tag):
    """Calculates the target URL of the desired component"""
    if tag == 'latest':
        return f'https://github.com/ForgeRock/forgeops/releases/latest/download/{component}.yaml'
    return f'https://github.com/ForgeRock/forgeops/releases/download/{tag}/{component}.yaml'

def deploy_repo_manifest(component, ns, tag, fqdn):
    """Deploy the component using released manifest"""
    component_url = get_component_url(component, tag)
    try:
        with request.urlopen(component_url, timeout=5) as r:
            contents = r.read().decode('ascii')
            contents = contents.replace('namespace: default', f'namespace: {ns}')
            contents = contents.replace('default.iam.example.com', f'{fqdn}')
            utils.run('kubectl', f'-n {ns} apply -f -', stdin=bytes(contents, 'ascii'))
    except Exception as e:
        print(f'Could not deploy {component_url}. Got: {e}')
        sys.exit(1)  # Hide python traceback. kubectl error should be enough here

def deploy_local_manifest(component, ns, fqdn, ctx):
    """Deploy local component (local mode)"""
    # Clean out the temp kustomize files
    kustomize_dir = os.path.join(sys.path[0], '../kustomize')
    image_defaulter = os.path.join(kustomize_dir, 'dev', 'image-defaulter')
    utils.run('kustomize', 'edit remove resource ../../../kustomize/*/*/* ../../../kustomize/*/*',
              cwd=image_defaulter)
    try:
        to_call = [] 
        components_to_install = bundles.get(component, [f'base/{component}'])
        # Temporarily add the wanted kustomize files
        for c in components_to_install:
            if callable(c):
                to_call.append(c)
                continue
            else:
                utils.run('kustomize', f'edit add resource ../../../kustomize/{c}', cwd=image_defaulter)
        _, contents, _ = utils.run('kustomize', f'build {image_defaulter}', cstdout=True)
        contents = contents.decode('ascii')
        if contents:
            contents = contents.replace('namespace: default', f'namespace: {ns}')
            contents = contents.replace('default.iam.example.com', f'{fqdn}')
            if ctx.lower() == 'minikube':
                contents = contents.replace('imagePullPolicy: Always', 'imagePullPolicy: IfNotPresent')
            utils.run('kubectl', f'-n {ns} apply -f -', stdin=bytes(contents, 'ascii'))
        for c in to_call:
            c(component, ns, fqdn, ctx)
    finally:
        # Clean out the temp kustomize files
        utils.run('kustomize', 'edit remove resource ../../../kustomize/*/*/* ../../../kustomize/*/*',
                cwd=image_defaulter)

def deploy_component(component, ns, fqdn, tag, ctx):
    """Deploy the Component manifest"""
    if tag:
        deploy_repo_manifest(component, ns, tag, fqdn)
        return
    deploy_local_manifest(component, ns, fqdn, ctx)

def uninstall_component(component, ns):
    """Uninstall a manifest"""
    if  component == "all":
        for c in ['ui', 'apps', 'ds', 'base']:
            uninstall_component(c, ns)
        return
    try:
        # Clean out the temp kustomize files
        kustomize_dir = os.path.join(sys.path[0], '../kustomize')
        image_defaulter = os.path.join(kustomize_dir, 'dev', 'image-defaulter')
        utils.run('kustomize', 'edit remove resource ../../../kustomize/*/*/* ../../../kustomize/*/*',
                cwd=image_defaulter)
        components_to_delete = bundles.get(component, [f'base/{component}'])
        # Temporarily add the wanted kustomize files
        for c in components_to_delete:
            utils.run('kustomize', f'edit add resource ../../../kustomize/{c}', cwd=image_defaulter)
        _, contents, _ = utils.run('kustomize', f'build {image_defaulter}', cstdout=True)
        contents = contents.decode('ascii')
        utils.run('kubectl', f'-n {ns} delete --ignore-not-found=true -f -', stdin=bytes(contents, 'ascii'))

        if component in ['base', 'all']:
            utils.run('kubectl', f'-n {ns} delete all -l app.kubernetes.io/part-of=forgerock')
            utils.run('kubectl', f'-n {ns} delete pvc --all --ignore-not-found=true')
    except Exception as e:
        print(f'Could not delete {component}. Got: {e}')
        sys.exit(1)  # Hide python traceback.
    finally:
        # Clean out the temp kustomize files
        utils.run('kustomize', 'edit remove resource ../../../kustomize/*/*/* ../../../kustomize/*/*',
                cwd=image_defaulter)

def deploy_all(ns, fqdn, tag, ctx):
    """Deploy all"""
    utils.message('Deploying base.yaml. This is a one time activity.')
    deploy_component('base', ns, fqdn, tag, ctx)
    utils.message('\nDeploying ds.yaml. This is includes all directory resources.')
    deploy_component('ds', ns, fqdn, tag, ctx)
    utils.message('\nWaiting for DS deployment. This can take a few mins. First installation takes longer.')
    time.sleep(2)
    utils.wait_for_ds(ns, 'ds-idrepo')
    utils.message('\nDeploying apps.')
    deploy_component('apps', ns, fqdn, tag, ctx)
    utils.message('\nWaiting for AM deployment. This can take a few minutes. First installation takes longer.')
    time.sleep(2)
    utils.run('kubectl', f'-n {ns} wait --for=condition=Available deployment -l app.kubernetes.io/name=am --timeout=600s')
    amster_import(None, ns, None, None)
    utils.message('\nWaiting for IDM deployment. This can take a few minutes. First installation takes longer.')
    utils.run('kubectl', f'-n {ns} wait --for=condition=Ready pod -l app=idm --timeout=600s')
    utils.message('\nDeploying UI.')
    deploy_component('ui', ns, fqdn, tag, ctx)
    # message('\nWaiting for UI pods to become ready')
    # run('kubectl', f'-n {ns} wait --for=condition=Available deployment -l app.kubernetes.io/component=ui --timeout=600s')

def overlay_app_configs(ns, am=True, idm=True):
    """Overlay local configs in the AM and IDM pods"""
    config_profile_path = os.path.join(sys.path[0], '../docker')
    if am:
        am_config_path = os.path.join(config_profile_path, 'am', 'config-profiles', 'cdk', 'config')
        _, am_pod_name, _ = utils.run('kubectl', f'-n {ns} get pods -l app.kubernetes.io/name=am -o jsonpath={{.items[0].metadata.name}}',
                                      cstdout=True)
        am_pod_name = am_pod_name.decode('ascii')
        utils.message(f'Copying your local AM configs into "{am_pod_name}" pod in "{ns}" namespace')
        utils.run('kubectl', f'-n {ns} cp {am_config_path} {am_pod_name}:/home/forgerock/openam/ -c openam')
    if idm:
        _, idm_pod_name, _ = utils.run('kubectl', f'-n {ns} get pods -l app.kubernetes.io/name=idm -o jsonpath={{.items[0].metadata.name}}',
                                       cstdout=True)
        idm_pod_name = idm_pod_name.decode('ascii')
        utils.message(f'Copying your local IDM configs into "{idm_pod_name}" pod in "{ns}" namespace')
        for directory in os.listdir(os.path.join(config_profile_path, 'idm', 'config-profiles', 'cdk')):
            idm_config_path = os.path.join(config_profile_path, 'idm', 'config-profiles', 'cdk', directory)
            utils.run('kubectl', f'-n {ns} cp {idm_config_path} {idm_pod_name}:/opt/openidm/ -c openidm')

    utils.message('Restarting AM and IDM pods')
    if am:
        utils.run('kubectl', f'-n {ns} exec {am_pod_name}  -c openam  -- kill 1')
    if idm:
        utils.run('kubectl', f'-n {ns} exec {idm_pod_name} -c openidm -- kill 1')

def build_docker_image(component, default_repo, tag, config_profile=None):
    """Builds custom docker images"""
    # Clean out the temp kustomize files
    base_dir = os.path.join(sys.path[0], '../')
    kustomize_dir = os.path.join(sys.path[0], '../kustomize')
    image_defaulter = os.path.join(kustomize_dir, 'dev', 'image-defaulter')
    utils.run('kustomize', 'edit remove resource ../../../kustomize/*/*/* ../../../kustomize/*/*',
              cwd=image_defaulter)
    tag_data = utils.build_docker_image(component, default_repo, tag, config_profile)
    name = utils.DOCKER_REGEX_NAME.get(component, component)
    utils.run('kustomize', f'edit set image {name}={tag_data}', cwd=image_defaulter)
    utils.warning(f'Updated the image_defaulter with your new image for {component}: "{tag_data}"')


def main():

    common = argparse.ArgumentParser(add_help=False)
    common.add_argument('-n', '--namespace', default='',
                        help='Target namespace (default: current namespace)')
    common.add_argument('components', nargs='*', choices=['all', 'base', 'ds', 'apps', 'ui', 'am', 'amster', 'idm',
                                                          'ds-idrepo', 'ds-cts', 'admin-ui', 'end-user-ui', 'login-ui', 'ig',
                                                          'rcs-agent', []])
    parser = argparse.ArgumentParser(
        description='Manage ForgeRock platform components')
    subparser = parser.add_subparsers(dest='cmd', required=True)
    parser_install = subparser.add_parser('install', parents=[common],
                                          help='Install the platform components or component bundles using local manifests')
    parser_install.add_argument('-f', '--fqdn', dest='fqdn',
                                help='Select the FQDN for this deployment')
    parser_delete = subparser.add_parser(
        'delete', parents=[common], help='Delete ForgeRock Platform components or component bundles')
    parser_delete.add_argument('-y', '--yes', dest='skip_confirmation', action='store_true',
                               help='Skip delete confirmation')
    parser_build = subparser.add_parser('build', help='Build custom docker images')
    parser_build.add_argument('components', nargs='*', choices=['all'] + build_targets, default= 'all')
    parser_build.add_argument('-r', '--default-repo', dest='registry')
    parser_build.add_argument('-t', '--tag', required=False)
    parser_build.add_argument('-p', '--config-profile', dest='config_profile')
    parser_build.add_argument('--reset', action='store_true', help='Reset the image-defaulter file')
    subparser.add_parser('info', parents=[common], help='Print relevant deployment information')
    subparser.add_parser('config', parents=[common], help='Copy local configs to AM and IDM')
    args = parser.parse_args()

    # Check toolset versions before doing anything
    utils.check_base_toolset()
    if args.cmd != 'build':
        ctx_namespace = utils.get_namespace()
        ctx = utils.get_context()
        namespace = getattr(args, 'namespace', None) or ctx_namespace
        fqdn = args.fqdn if getattr(args, 'fqdn', None) else f'{namespace}.iam.example.com'

    components = args.components if getattr(args, 'components', None) else ['all']
    if args.cmd == 'info':
        utils.message(f'Targeting namesapce: "{namespace}"')
        utils.printsecrets(namespace)
        utils.printurls(namespace)
        return
    if args.cmd == 'config':
        overlay_app_configs(namespace)
        return
    if args.cmd is None:
        parser.print_help()
        sys.exit(1)
    if args.cmd == 'delete':
        utils.message(f'Uninstalling component(s): {components} from namespace: "{namespace}"')
        if not args.skip_confirmation:
            if input('OK to delete these components? [Y/N] ').lower() not in ['yes', 'y']:
                return
        if 'base' in components: #delete 'base' last
            components.append(components.pop(components.index('base')))
        for c in components:
            uninstall_component(c, namespace)
        return
    if args.cmd == 'build':
        if args.reset:
            image_defaulter = os.path.join(sys.path[0], '../kustomize', 'dev', 'image-defaulter' )
            utils.message(f'Reset to git index: {image_defaulter} ')
            utils.run('git', f'checkout {image_defaulter}')
            return
        if 'all' in components:
            components = build_targets
        if 'amster' in components:
            utils. error('Embedding AM dynamic configs in the amster image is deprecated. Manage AM dynamic config with the bin/amster cmd instead.')
        for c in components:
            build_docker_image(c, args.registry, args.tag, args.config_profile)
        return
    utils.install_dependencies()
    utils.message(f'Installing component(s): {components} in namespace: "{namespace}"\n')
    if 'all' in components:
        deploy_all(namespace, fqdn, None, ctx)
    else:
        for c in components:
            deploy_component(c, namespace, fqdn, None, ctx)

    if args.cmd == 'install' and ('base' in components or 'all' in components):
        utils.waitforsecrets(namespace)
        utils.printsecrets(namespace)
        utils.printurls(namespace)
    utils.message('\nEnjoy your deployment!')

if __name__ == '__main__':
    main()
